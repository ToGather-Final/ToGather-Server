# ===============================================
# ✅ 공통 설정 (모든 프로파일에 적용)
# ===============================================
app:
  database:
    url: ${DB_URL:jdbc:mysql://localhost:3306/togather_db}
    username: ${DB_USERNAME:admin}
    password: ${DB_PASSWORD:}
  redis:
    host: ${SPRING_DATA_REDIS_HOST:localhost}
    port: ${SPRING_DATA_REDIS_PORT:6379}
    password: ${SPRING_DATA_REDIS_PASSWORD:}
  rabbitmq:
    host: ${SPRING_RABBITMQ_HOST:localhost}
    port: 5672
    username: ${SPRING_RABBITMQ_USERNAME:guest}
    password: ${SPRING_RABBITMQ_PASSWORD:guest}
  jwt:
    secret: ${JWT_SECRET_KEY:}
    issuer: ${JWT_ISSUER:togather}
    access-exp-seconds: ${JWT_ACCESS_EXP:18000}
    refresh-exp-days: ${JWT_REFRESH_EXP:7}
  services:
    user-service:
      url: ${USER_SERVICE_URL:http://localhost:8082}

spring:
  config:
    import:
      - optional:file:application-dev.yml
  application:
    name: trading-service
  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true
    open-in-view: false
  data:
    redis:
      host: ${SPRING_DATA_REDIS_HOST:localhost}
      port: ${SPRING_DATA_REDIS_PORT:6379}
      password: ${SPRING_DATA_REDIS_PASSWORD:}
      timeout: 2000ms
      connect-timeout: 2000ms
  rabbitmq:
    host: ${SPRING_RABBITMQ_HOST:localhost}
    port: 5672
    username: ${SPRING_RABBITMQ_USERNAME:guest}
    password: ${SPRING_RABBITMQ_PASSWORD:guest}
    connection-timeout: 15000
    virtual-host: /
  management:
    endpoints:
      web:
        exposure:
          include: health,info,metrics
    endpoint:
      health:
        show-details: always

# JWT 설정 키를 'secret-key'로 통일합니다.
jwt:
  secret-key: ${JWT_SECRET_KEY}

# 서비스 URL 설정
vote-service:
  url: ${VOTE_SERVICE_URL:http://localhost:8084}

springdoc:
  api-docs:
    enabled: true
  swagger-ui:
    enabled: true
    path: /swagger-ui.html
  override-with-generic-response: false


---
# ===============================================
# 🌳 dev 프로파일 (개발 환경)
# ===============================================
spring:
  config:
    activate:
      on-profile: "dev"
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${app.database.url:jdbc:mysql://localhost:3306/togather_db}
    username: ${app.database.username:admin}
    password: ${app.database.password:}
  jpa:
    hibernate:
      ddl-auto: update # 개발 시에는 스키마 자동 변경
    show-sql: false # SQL 로그는 logging.level로 제어

# 🔧 dev 프로파일 로깅 설정 (최상위 레벨에 위치해야 함!)
logging:
  level:
    com.example.trading_service: DEBUG
    # WebSocket 관련 로그 간소화
    com.example.trading_service.service.RedisCacheService: WARN
    com.example.trading_service.service.OrderBookService: INFO
    com.example.trading_service.service.GroupTradingService: INFO
    com.example.trading_service.service.WebSocketOrderBookService: WARN
    com.example.trading_service.service.KisWebSocketClient: WARN
    com.example.trading_service.service.StockPriceService: WARN
    com.example.trading_service.service.KisTokenService: WARN
    com.example.trading_service.service.ChartService: WARN
    # WebSocketController는 INFO로 연결 상태 확인
    com.example.trading_service.controller.WebSocketController: INFO
    # 체결 관련은 INFO (체결 성공만 보이고, 대기는 DEBUG로 숨김)
    com.example.trading_service.service.TradeExecutionService: INFO
    # Hibernate SQL 로그 간소화
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN

jwt:
  secret: ${JWT_SECRET_KEY:TogatherSecretkey}
  access-exp-seconds: ${JWT_ACCESS_EXP:18000}
  refresh-exp-days: ${JWT_REFRESH_EXP:7}

kis:
  base-url: ${KIS_BASE_URL:https://openapi.koreainvestment.com:9443}
  appkey: ${KIS_APPKEY:}
  appsecret: ${KIS_APPSECRET:}

server:
  port: 8081

pay-service:
  url: ${PAY_SERVICE_URL:http://localhost:8083}
user-service:
  url: ${USER_SERVICE_URL:http://localhost:8082}

app:
  services:
    user-service:
      url: ${USER_SERVICE_URL:http://localhost:8082}

---
# ===============================================
# 🚀 main 프로파일 (운영 환경)
# ===============================================
spring:
  config:
    activate:
      on-profile: "main"
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    open-in-view: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true

# 🔧 main 프로파일 로깅 설정 (최상위 레벨에 위치해야 함!)
logging:
  level:
    com.example.trading_service: INFO
    # 운영 환경에서는 WebSocket 로그도 간소화
    com.example.trading_service.service.RedisCacheService: WARN
    com.example.trading_service.service.OrderBookService: INFO
    com.example.trading_service.service.GroupTradingService: INFO
    com.example.trading_service.service.WebSocketOrderBookService: WARN
    com.example.trading_service.service.KisWebSocketClient: WARN
    com.example.trading_service.service.StockPriceService: WARN
    com.example.trading_service.service.KisTokenService: WARN
    com.example.trading_service.service.ChartService: WARN
    # WebSocketController는 INFO로 연결 상태 확인
    com.example.trading_service.controller.WebSocketController: INFO
    # 체결 관련은 INFO (체결 성공만 보이고, 대기는 DEBUG로 숨김)
    com.example.trading_service.service.TradeExecutionService: INFO
    # Hibernate SQL 로그 간소화
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN

server:
  port: 8080
  
jwt:
  secret: ${JWT_SECRET_KEY:TogatherSecretkey}
  access-exp-seconds: ${JWT_ACCESS_EXP:18000}
  refresh-exp-days: ${JWT_REFRESH_EXP:7}

kis:
  base-url: ${KIS_BASE_URL:https://openapi.koreainvestment.com:9443}
  appkey: ${KIS_APPKEY:}
  appsecret: ${KIS_APPSECRET:}

pay-service:
  url: ${PAY_SERVICE_URL:http://pay-service:8080}

app:
  services:
    user-service:
      url: ${USER_SERVICE_URL:http://user-service:8080}

# 서비스 URL 설정
vote-service:
  url: ${VOTE_SERVICE_URL:http://vote-service:8080}