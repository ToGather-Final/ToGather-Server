name: Deploy ToGather Microservices to AWS EKS

on:
  push:
    branches: [ main, Refactor/#63-infra/inchan ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com
  EKS_CLUSTER_NAME: togather-cluster
  EKS_NAMESPACE: ${{ github.ref == 'refs/heads/main' && 'togather' || 'togather-refactor' }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set gradlew permissions
      run: chmod +x gradlew

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Checkout Client Repo # ToGather-Client 접근
      uses: actions/checkout@v4
      with:
        repository: ToGather-Final/ToGather-Client
        token: ${{ secrets.GH_PAT }}
        path: togather-client

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: |
        chmod +x gradlew
        ./gradlew build -x test

    - name: Build and push Next.js Client image
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          docker build -t $ECR_REGISTRY/togather/client:${{ github.sha }} -f ./togather-client/Dockerfile ./togather-client
          docker build -t $ECR_REGISTRY/togather/client:latest -f ./togather-client/Dockerfile ./togather-client
          docker push $ECR_REGISTRY/togather/client:${{ github.sha }}
          docker push $ECR_REGISTRY/togather/client:latest
        else
          docker build -t $ECR_REGISTRY/togather/client:refactor-${{ github.sha }} -f ./togather-client/Dockerfile ./togather-client
          docker push $ECR_REGISTRY/togather/client:refactor-${{ github.sha }}
        fi

    - name: Build and push API Gateway image
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          docker build -f api-gateway/Dockerfile -t $ECR_REGISTRY/togather/api-gateway:${{ github.sha }} .
          docker build -f api-gateway/Dockerfile -t $ECR_REGISTRY/togather/api-gateway:latest .
          docker push $ECR_REGISTRY/togather/api-gateway:${{ github.sha }}
          docker push $ECR_REGISTRY/togather/api-gateway:latest
        else
          docker build -f api-gateway/Dockerfile -t $ECR_REGISTRY/togather/api-gateway:refactor-${{ github.sha }} .
          docker push $ECR_REGISTRY/togather/api-gateway:refactor-${{ github.sha }}
        fi

    - name: Build and push User Service image
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          docker build -f user-service/Dockerfile -t $ECR_REGISTRY/togather/user-service:${{ github.sha }} .
          docker build -f user-service/Dockerfile -t $ECR_REGISTRY/togather/user-service:latest .
          docker push $ECR_REGISTRY/togather/user-service:${{ github.sha }}
          docker push $ECR_REGISTRY/togather/user-service:latest
        else
          docker build -f user-service/Dockerfile -t $ECR_REGISTRY/togather/user-service:refactor-${{ github.sha }} .
          docker push $ECR_REGISTRY/togather/user-service:refactor-${{ github.sha }}
        fi

    - name: Build and push Trading Service image
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          docker build -f trading-service/Dockerfile -t $ECR_REGISTRY/togather/trading-service:${{ github.sha }} .
          docker build -f trading-service/Dockerfile -t $ECR_REGISTRY/togather/trading-service:latest .
          docker push $ECR_REGISTRY/togather/trading-service:${{ github.sha }}
          docker push $ECR_REGISTRY/togather/trading-service:latest
        else
          docker build -f trading-service/Dockerfile -t $ECR_REGISTRY/togather/trading-service:refactor-${{ github.sha }} .
          docker push $ECR_REGISTRY/togather/trading-service:refactor-${{ github.sha }}
        fi

    - name: Build and push Pay Service image
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          docker build -f pay-service/Dockerfile -t $ECR_REGISTRY/togather/pay-service:${{ github.sha }} .
          docker build -f pay-service/Dockerfile -t $ECR_REGISTRY/togather/pay-service:latest .
          docker push $ECR_REGISTRY/togather/pay-service:${{ github.sha }}
          docker push $ECR_REGISTRY/togather/pay-service:latest
        else
          docker build -f pay-service/Dockerfile -t $ECR_REGISTRY/togather/pay-service:refactor-${{ github.sha }} .
          docker push $ECR_REGISTRY/togather/pay-service:refactor-${{ github.sha }}
        fi

    - name: Build and push Vote Service image
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          docker build -f vote-service/Dockerfile -t $ECR_REGISTRY/togather/vote-service:${{ github.sha }} .
          docker build -f vote-service/Dockerfile -t $ECR_REGISTRY/togather/vote-service:latest .
          docker push $ECR_REGISTRY/togather/vote-service:${{ github.sha }}
          docker push $ECR_REGISTRY/togather/vote-service:latest
        else
          docker build -f vote-service/Dockerfile -t $ECR_REGISTRY/togather/vote-service:refactor-${{ github.sha }} .
          docker push $ECR_REGISTRY/togather/vote-service:refactor-${{ github.sha }}
        fi

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl for EKS
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Deploy to EKS
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/Refactor/#63-infra/inchan'
      run: |
        # 1. 네임스페이스 생성 (동적으로 생성)
        kubectl create namespace ${{ env.EKS_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

        # 2. Secret 생성 (모든 민감 정보를 GitHub Secrets에서 가져와 통합)
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: Secret
        metadata:
          name: togather-secrets
          namespace: ${{ env.EKS_NAMESPACE }}
        type: Opaque
        stringData:
          DB_USERNAME: "${{ secrets.DB_USERNAME }}"
          DB_PASSWORD: "${{ secrets.DB_PASSWORD }}"
          JWT_SECRET_KEY: "${{ secrets.JWT_SECRET_KEY }}"
          RABBITMQ_PASSWORD: "${{ secrets.RABBITMQ_PASSWORD }}"
          REDIS_PASSWORD: "${{ secrets.REDIS_PASSWORD }}"
          SPRING_DATA_REDIS_PASSWORD: "${{ secrets.REDIS_PASSWORD }}"
        EOF

        # 3. RBAC 먼저 적용 (ServiceAccount/Role/RoleBinding)
        kubectl apply -f k8s/api-gateway-rbac.yaml -n ${{ env.EKS_NAMESPACE }}

        # 4. 환경변수 치환 후 나머지 모든 리소스 배포
        # ECR_REGISTRY와 EKS_NAMESPACE 환경변수를 k8s 파일들에 치환
        export ECR_REGISTRY=${{ env.ECR_REGISTRY }}
        export EKS_NAMESPACE=${{ env.EKS_NAMESPACE }}
        
        envsubst < k8s/api-gateway.yaml | kubectl apply -f -
        envsubst < k8s/user-service.yaml | kubectl apply -f -
        envsubst < k8s/trading-service.yaml | kubectl apply -f -
        envsubst < k8s/pay-service.yaml | kubectl apply -f -
        envsubst < k8s/vote-service.yaml | kubectl apply -f -
        
        # 나머지 리소스들 (ConfigMap, Service, Ingress 등) 배포
        envsubst < k8s/configmap.yaml | kubectl apply -f -
        envsubst < k8s/configmap-env.yaml | kubectl apply -f -
        envsubst < k8s/redis.yaml | kubectl apply -f -
        envsubst < k8s/rabbitmq.yaml | kubectl apply -f -
        envsubst < k8s/ingress.yaml | kubectl apply -f -
        envsubst < k8s/nextjs-client.yaml | kubectl apply -f -
        envsubst < k8s/hpa.yaml | kubectl apply -f -    

        # 5. 각 디플로이먼트에 브랜치별 이미지 설정 (롤아웃 트리거)
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          kubectl set image deployment/api-gateway api-gateway=${{ env.ECR_REGISTRY }}/togather/api-gateway:${{ github.sha }} -n ${{ env.EKS_NAMESPACE }} --record=true
          kubectl set image deployment/user-service user-service=${{ env.ECR_REGISTRY }}/togather/user-service:${{ github.sha }} -n ${{ env.EKS_NAMESPACE }} --record=true
          kubectl set image deployment/trading-service trading-service=${{ env.ECR_REGISTRY }}/togather/trading-service:${{ github.sha }} -n ${{ env.EKS_NAMESPACE }} --record=true
          kubectl set image deployment/pay-service pay-service=${{ env.ECR_REGISTRY }}/togather/pay-service:${{ github.sha }} -n ${{ env.EKS_NAMESPACE }} --record=true
          kubectl set image deployment/vote-service vote-service=${{ env.ECR_REGISTRY }}/togather/vote-service:${{ github.sha }} -n ${{ env.EKS_NAMESPACE }} --record=true
          kubectl set image deployment/nextjs-client nextjs-client=${{ env.ECR_REGISTRY }}/togather/client:${{ github.sha }} -n ${{ env.EKS_NAMESPACE }} --record=true
        else
          kubectl set image deployment/api-gateway api-gateway=${{ env.ECR_REGISTRY }}/togather/api-gateway:refactor-${{ github.sha }} -n ${{ env.EKS_NAMESPACE }} --record=true
          kubectl set image deployment/user-service user-service=${{ env.ECR_REGISTRY }}/togather/user-service:refactor-${{ github.sha }} -n ${{ env.EKS_NAMESPACE }} --record=true
          kubectl set image deployment/trading-service trading-service=${{ env.ECR_REGISTRY }}/togather/trading-service:refactor-${{ github.sha }} -n ${{ env.EKS_NAMESPACE }} --record=true
          kubectl set image deployment/pay-service pay-service=${{ env.ECR_REGISTRY }}/togather/pay-service:refactor-${{ github.sha }} -n ${{ env.EKS_NAMESPACE }} --record=true
          kubectl set image deployment/vote-service vote-service=${{ env.ECR_REGISTRY }}/togather/vote-service:refactor-${{ github.sha }} -n ${{ env.EKS_NAMESPACE }} --record=true
          kubectl set image deployment/nextjs-client nextjs-client=${{ env.ECR_REGISTRY }}/togather/client:refactor-${{ github.sha }} -n ${{ env.EKS_NAMESPACE }} --record=true
        fi

    - name: Wait for deployment to complete
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/Refactor/#63-infra/inchan'
      run: |
        kubectl rollout status deployment/api-gateway -n ${{ env.EKS_NAMESPACE }} --timeout=600s
        kubectl rollout status deployment/user-service -n ${{ env.EKS_NAMESPACE }} --timeout=600s
        kubectl rollout status deployment/trading-service -n ${{ env.EKS_NAMESPACE }} --timeout=600s
        kubectl rollout status deployment/pay-service -n ${{ env.EKS_NAMESPACE }} --timeout=600s
        kubectl rollout status deployment/vote-service -n ${{ env.EKS_NAMESPACE }} --timeout=600s
        kubectl rollout status deployment/nextjs-client -n ${{ env.EKS_NAMESPACE }} --timeout=600s
        kubectl rollout status deployment/redis -n ${{ env.EKS_NAMESPACE }} --timeout=600s

    - name: Verify deployment
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/Refactor/#63-infra/inchan'
      run: |
        kubectl get pods -n ${{ env.EKS_NAMESPACE }}
        kubectl get services -n ${{ env.EKS_NAMESPACE }}
        kubectl get ingress -n ${{ env.EKS_NAMESPACE }}

    - name: Diagnostics on failure
      if: failure()
      run: |
        kubectl get deploy -n ${{ env.EKS_NAMESPACE }}
        kubectl describe deploy api-gateway -n ${{ env.EKS_NAMESPACE }}
        kubectl get pods -n ${{ env.EKS_NAMESPACE }} -l app=api-gateway -o wide
        POD=$(kubectl get pods -n ${{ env.EKS_NAMESPACE }} -l app=api-gateway -o jsonpath='{.items[0].metadata.name}')
        kubectl describe pod $POD -n ${{ env.EKS_NAMESPACE }} || true
        kubectl logs $POD -n ${{ env.EKS_NAMESPACE }} --tail=200 || true