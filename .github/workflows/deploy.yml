name: Deploy ToGather Microservices to AWS EKS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com
  EKS_CLUSTER_NAME: togather-cluster
  EKS_NAMESPACE: togather

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set gradlew permissions
      run: chmod +x gradlew

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: |
        chmod +x gradlew
        ./gradlew build -x test

#    - name: Run tests
#      run: |
#        chmod +x gradlew
#        ./gradlew test

    - name: Build and push API Gateway image
      run: |
        docker build -f api-gateway/Dockerfile -t $ECR_REGISTRY/togather/api-gateway:${{ github.sha }} .
        docker build -f api-gateway/Dockerfile -t $ECR_REGISTRY/togather/api-gateway:latest .
        docker push $ECR_REGISTRY/togather/api-gateway:${{ github.sha }}
        docker push $ECR_REGISTRY/togather/api-gateway:latest

    - name: Build and push User Service image
      run: |
        docker build -f user-service/Dockerfile -t $ECR_REGISTRY/togather/user-service:${{ github.sha }} .
        docker build -f user-service/Dockerfile -t $ECR_REGISTRY/togather/user-service:latest .
        docker push $ECR_REGISTRY/togather/user-service:${{ github.sha }}
        docker push $ECR_REGISTRY/togather/user-service:latest

    - name: Build and push Trading Service image
      run: |
        docker build -f trading-service/Dockerfile -t $ECR_REGISTRY/togather/trading-service:${{ github.sha }} .
        docker build -f trading-service/Dockerfile -t $ECR_REGISTRY/togather/trading-service:latest .
        docker push $ECR_REGISTRY/togather/trading-service:${{ github.sha }}
        docker push $ECR_REGISTRY/togather/trading-service:latest

    - name: Build and push Pay Service image
      run: |
        docker build -f pay-service/Dockerfile -t $ECR_REGISTRY/togather/pay-service:${{ github.sha }} .
        docker build -f pay-service/Dockerfile -t $ECR_REGISTRY/togather/pay-service:latest .
        docker push $ECR_REGISTRY/togather/pay-service:${{ github.sha }}
        docker push $ECR_REGISTRY/togather/pay-service:latest

    - name: Build and push Vote Service image
      run: |
        docker build -f vote-service/Dockerfile -t $ECR_REGISTRY/togather/vote-service:${{ github.sha }} .
        docker build -f vote-service/Dockerfile -t $ECR_REGISTRY/togather/vote-service:latest .
        docker push $ECR_REGISTRY/togather/vote-service:${{ github.sha }}
        docker push $ECR_REGISTRY/togather/vote-service:latest

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl for EKS
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Install Nginx Ingress Controller
      if: github.ref == 'refs/heads/main'
      run: |
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/aws/deploy.yaml
        kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=300s

    - name: Deploy to EKS
      if: github.ref == 'refs/heads/main'
      run: |
        # ECR 이미지 태그 업데이트
        sed -i "s|your-ecr-account.dkr.ecr.region.amazonaws.com|$ECR_REGISTRY|g" k8s/*.yaml
        
        # Namespace 생성
        kubectl apply -f k8s/namespace.yaml
        
        # ConfigMap 생성 (비민감 데이터)
        kubectl apply -f k8s/configmap.yaml
        
        # Secret 생성 (GitHub Secrets 사용)
        kubectl create secret generic togather-secret \
          --from-literal=DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
          --from-literal=JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" \
          --from-literal=RABBITMQ_PASSWORD="guest" \
          --namespace=togather \
          --dry-run=client -o yaml | kubectl apply -f -
        
        # ConfigMap에 민감한 데이터 추가 (DB URL, Username)
        kubectl create configmap togather-db-config \
          --from-literal=DB_URL="${{ secrets.DB_URL }}" \
          --from-literal=DB_USERNAME="${{ secrets.DB_USERNAME }}" \
          --namespace=togather \
          --dry-run=client -o yaml | kubectl apply -f -
        
        # 환경별 ConfigMap 생성 (프로덕션 설정)
        kubectl create configmap togather-env-config \
          --from-literal=SPRING_PROFILES_ACTIVE="prod" \
          --from-literal=LOGGING_LEVEL_ROOT="WARN" \
          --from-literal=LOGGING_LEVEL_COM_EXAMPLE="INFO" \
          --namespace=togather \
          --dry-run=client -o yaml | kubectl apply -f -
        
        # RabbitMQ 배포
        kubectl apply -f k8s/rabbitmq.yaml
        
        # 마이크로서비스 배포
        kubectl apply -f k8s/user-service.yaml
        kubectl apply -f k8s/trading-service.yaml
        kubectl apply -f k8s/pay-service.yaml
        kubectl apply -f k8s/vote-service.yaml
        
        # API Gateway 배포
        kubectl apply -f k8s/api-gateway.yaml
        
        # Ingress 배포 (Nginx Ingress Controller 사용)
        kubectl apply -f k8s/ingress.yaml
        
        # HPA 배포
        kubectl apply -f k8s/hpa.yaml

    - name: Wait for deployment to complete
      if: github.ref == 'refs/heads/main'
      run: |
        kubectl rollout status deployment/api-gateway -n ${{ env.EKS_NAMESPACE }} --timeout=300s
        kubectl rollout status deployment/user-service -n ${{ env.EKS_NAMESPACE }} --timeout=300s
        kubectl rollout status deployment/trading-service -n ${{ env.EKS_NAMESPACE }} --timeout=300s
        kubectl rollout status deployment/pay-service -n ${{ env.EKS_NAMESPACE }} --timeout=300s
        kubectl rollout status deployment/vote-service -n ${{ env.EKS_NAMESPACE }} --timeout=300s

    - name: Verify deployment
      if: github.ref == 'refs/heads/main'
      run: |
        kubectl get pods -n ${{ env.EKS_NAMESPACE }}
        kubectl get services -n ${{ env.EKS_NAMESPACE }}
        kubectl get ingress -n ${{ env.EKS_NAMESPACE }}