plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.6' apply false // 👈 루트에서는 적용(apply)하지 않음
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

// 💡 Spring Cloud 버전 관리를 위한 블록 추가
ext {
    set('springCloudVersion', "2023.0.3") // Spring Boot 버전에 맞는 Spring Cloud 버전
}

allprojects {
    repositories {
        mavenCentral()
    }
}

// 모든 하위 모듈(subprojects)에 대한 공통 설정
subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    dependencies {
        // 모든 하위 모듈에 공통적으로 필요한 의존성
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.security:spring-security-test'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }

    tasks.withType(Test) {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
            exceptionFormat "full"
        }
    }
}

project(':module-common') {
    // 공통 모듈은 별도 설정 필요 없음
}

project(':api-gateway') {
    ext {
        set('springCloudVersion', "2023.0.3")
    }
    
    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }
    
    dependencies {
        // ✅ Spring Cloud Gateway (WebFlux 기반)
        implementation 'org.springframework.cloud:spring-cloud-starter-gateway'

        // ✅ WebFlux (Gateway 필수)
        implementation 'org.springframework.boot:spring-boot-starter-webflux'

        // ✅ Spring Security WebFlux (WebMVC 제외)
        implementation('org.springframework.boot:spring-boot-starter-security') {
            exclude group: 'org.springframework.boot', module: 'spring-boot-starter-web'
        }

        // ✅ JWT
        implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
        runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
        runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

        // ✅ Redis (Lettuce 사용) - JPA 의존성 제거
        implementation('org.springframework.boot:spring-boot-starter-data-redis-reactive') {
            exclude group: 'org.springframework.boot', module: 'spring-boot-starter-data-jpa'
        }

        // ✅ Actuator (Health Check용)
        implementation 'org.springframework.boot:spring-boot-starter-actuator'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        // Test
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.security:spring-security-test'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }
}

project(':user-service') {
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-data-redis'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
        runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
        runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

        runtimeOnly 'com.mysql:mysql-connector-j'

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.security:spring-security-test'

        // ✅ Testcontainers
        testImplementation 'org.testcontainers:testcontainers'
        testImplementation 'org.testcontainers:mysql'
        testImplementation 'org.testcontainers:junit-jupiter'
    }
}

project(':vote-service') {
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
        runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
        runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
        runtimeOnly 'com.mysql:mysql-connector-j'

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

        // ✅ Redis (Jedis 사용)
        implementation('org.springframework.boot:spring-boot-starter-data-redis') {
            exclude group: 'io.lettuce', module: 'lettuce-core'
        }
        implementation 'redis.clients:jedis'
    }
}

project(':pay-service') {
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-data-redis'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
        runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
        runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

        runtimeOnly 'com.mysql:mysql-connector-j'

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.security:spring-security-test'
        testImplementation 'com.h2database:h2'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }
}

project(':trading-service') {
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-data-redis'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
        runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
        runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

        runtimeOnly 'com.mysql:mysql-connector-j'

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.security:spring-security-test'
        testImplementation 'com.h2database:h2'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }
}

tasks.named('test') {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}