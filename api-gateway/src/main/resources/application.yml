# ===============================================
# ✅ 공통 설정 (모든 프로파일에 적용)
# ===============================================
server:
  port: 8000

jwt:
  secret: ${JWT_SECRET_KEY:}

management:
  endpoints:
    web:
      exposure:
        include: health,info
      base-path: /actuator
  endpoint:
    health:
      probes:
        enabled: true
      show-details: when-authorized

spring:
  application:
    name: api-gateway
  profiles:
    active: dev
  config:
    import: optional:file:application-dev.yml
  main:
    allow-bean-definition-overriding: true
    web-application-type: reactive
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration
      - org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration
      - org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
      - org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration
      - org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration
      - org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration
  datasource:
    url: ""
    username: ""
    password: ""
    driver-class-name: ""
  data:
    redis:
      host: ${SPRING_DATA_REDIS_HOST:localhost}
      port: ${SPRING_DATA_REDIS_PORT:6379}
      password: ${SPRING_DATA_REDIS_PASSWORD:}
      timeout: 2000ms
      connect-timeout: 2000ms

logging:
  level:
    root: INFO
    org.springframework.cloud.gateway: INFO
    org.springframework.cloud.kubernetes: INFO
    org.springframework.cloud.loadbalancer: INFO
    org.springframework.web.reactive: INFO
    reactor.netty: INFO
    com.example.api_gateway: INFO

---
# ===============================================
# 🌳 dev 프로파일 (로컬 개발 환경)
# ===============================================
spring:
  config:
    activate:
      on-profile: "dev"
  cloud:
    compatibility-verifier:
      enabled: false  # Spring Boot 3.5.6과 Spring Cloud 2024.0.0 호환성 체크 비활성화
    gateway:
      routes:
        # 인증 서비스
        - id: auth-service
          uri: http://localhost:8082
          predicates:
            - Path=/api/auth/**
          filters:
            - StripPrefix=1

        # 사용자 서비스
        - id: user-service
          uri: http://localhost:8082
          predicates:
            - Path=/api/users/**
          filters:
            - StripPrefix=1

        # 그룹 서비스
        - id: group-service
          uri: http://localhost:8082
          predicates:
            - Path=/api/groups/**
          filters:
            - StripPrefix=1

        # 투표 서비스
        - id: vote-service
          uri: http://localhost:8084
          predicates:
            - Path=/api/vote/**,/api/votes/**
          filters:
            - StripPrefix=1

        # 히스토리 서비스 (vote-service에서 제공)
        - id: history-service
          uri: http://localhost:8084
          predicates:
            - Path=/api/history/**
          filters:
            - StripPrefix=1

        # WebSocket 서비스 (트레이딩 서비스 내부)
        - id: websocket-service
          uri: http://localhost:8081
          predicates:
            - Path=/api/websocket/**
          filters:
            - RewritePath=/api/websocket/(?<segment>.*), /${segment}

            
        # 트레이딩 서비스
        - id: trading-service
          uri: http://localhost:8081
          predicates:
            - Path=/api/trading/**
          filters:
            - StripPrefix=1

        # WebSocket 연결 엔드포인트
        - id: websocket-connection
          uri: http://localhost:8081
          predicates:
            - Path=/ws/**

        # 결제 서비스
        - id: pay-service
          uri: http://localhost:8083
          predicates:
            - Path=/api/pay/**
          filters:
            - StripPrefix=1

        # 계좌 서비스 (pay-service에서 제공)
        - id: accounts-service
          uri: http://localhost:8083
          predicates:
            - Path=/api/accounts/**
          filters:
            - StripPrefix=1
    kubernetes:
      discovery:
        enabled: false  # 로컬 개발 환경에서는 비활성화
        all-namespaces: false
      reload:
        enabled: false
      config:
        enabled: false
    loadbalancer:
      enabled: false  # 로컬 개발 환경에서는 비활성화
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration
      - org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration
      - org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
      - org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration
      - org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration
      - org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration
      - org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration
      - org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration

---
# ===============================================
# 🚀 main 프로파일 (AWS EKS 운영 환경)
# ===============================================
spring:
  config:
    activate:
      on-profile: "main"
  cloud:
    gateway:
      routes: #deprecated전에 server: webflux: routes: 형태로 수정해야함.
        - id: auth-service-route
          uri: lb://user-service
          predicates:
            - Path=/api/auth/**
          filters:
            - StripPrefix=1
        - id: user-service-route
          uri: lb://user-service
          predicates:
            - Path=/api/user/**
          filters:
            - StripPrefix=1
        - id: vote-service-route
          uri: lb://vote-service
          predicates:
            - Path=/api/vote/**,/api/votes/**
          filters:
            - StripPrefix=1
        - id: history-service-route
          uri: lb://vote-service
          predicates:
            - Path=/api/history/**
          filters:
            - StripPrefix=1
        - id: notification-service-route
          uri: lb://vote-service
          predicates:
            - Path=/api/notification/**
          filters:
            - StripPrefix=1
        - id: websocket-service-route
          uri: lb://trading-service
          predicates:
            - Path=/api/websocket/**
          filters:
            - RewritePath=/api/websocket/(?<segment>.*), /${segment}
        - id: trading-service-route
          uri: lb://trading-service
          predicates:
            - Path=/api/trading/**
          filters:
            - StripPrefix=1
        - id: websocket-connection-route
          uri: lb://trading-service
          predicates:
            - Path=/ws/**
        - id: pay-service-route
          uri: lb://pay-service
          predicates:
            - Path=/api/pay/**
          filters:
            - StripPrefix=1
        - id: accounts-service-route
          uri: lb://pay-service
          predicates:
            - Path=/api/accounts/**
          filters:
            - StripPrefix=1
    kubernetes:
      discovery:
        enabled: true
        all-namespaces: false
      reload:
        enabled: false
      config:
        enabled: false
    loadbalancer:
      enabled: true
      health-check:
        initial-delay: 0
        interval: 1s
    compatibility-verifier:
      enabled: false