server:
  port: 8000

management:
  endpoints:
    web:
      exposure:
        include: health,info
      base-path: /actuator
  endpoint:
    health:
      probes:
        enabled: true
      show-details: when-authorized

spring:
  application:
    name: api-gateway
  cloud:
    compatibility-verifier:
      enabled: false  # Spring Boot 3.5.6과 Spring Cloud 2024.0.0 호환성 체크 비활성화
    gateway:
      routes:
        # 인증 서비스
        - id: auth-service
          uri: http://localhost:8082
          predicates:
            - Path=/api/auth/**
          filters:
            - StripPrefix=1
            
        # 사용자 서비스
        - id: user-service
          uri: http://localhost:8082
          predicates:
            - Path=/api/users/**
          filters:
            - StripPrefix=1
            
        # 그룹 서비스
        - id: group-service
          uri: http://localhost:8082
          predicates:
            - Path=/api/groups/**
          filters:
            - StripPrefix=1
            
        # 투표 서비스
        - id: vote-service
          uri: http://localhost:8080
          predicates:
            - Path=/api/votes/**
          filters:
            - StripPrefix=1
            
        # 트레이딩 서비스
        - id: trading-service
          uri: http://localhost:8081
          predicates:
            - Path=/api/trading/**
          filters:
            - StripPrefix=1
            
        # 결제 서비스
        - id: pay-service
          uri: http://localhost:8083
          predicates:
            - Path=/api/pay/**
          filters:
            - StripPrefix=1
    kubernetes:
      discovery:
        enabled: false  # 로컬 개발 환경에서는 비활성화
        all-namespaces: false
      reload:
        enabled: false
      config:
        enabled: false
    loadbalancer:
      enabled: false  # 로컬 개발 환경에서는 비활성화

  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration
      - org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration
      - org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
      - org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration
      - org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration
      - org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration
      - org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration
      - org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration

  datasource:
    url: ""
    username: ""
    password: ""
    driver-class-name: ""

  data:
    redis:
      host: ${SPRING_DATA_REDIS_HOST:localhost}
      port: ${SPRING_DATA_REDIS_PORT:6379}
      password: ${SPRING_DATA_REDIS_PASSWORD:}
      timeout: 2000ms
      connect-timeout: 2000ms

jwt:
  secret: ${JWT_SECRET_KEY}

logging:
  level:
    root: INFO
    org.springframework.cloud.gateway: INFO
    org.springframework.cloud.kubernetes: INFO
    org.springframework.cloud.loadbalancer: INFO
    org.springframework.web.reactive: INFO
    reactor.netty: INFO
    com.example.api_gateway: INFO
