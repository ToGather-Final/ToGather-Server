openapi: 3.0.1
info:
  title: ToGather API Gateway
  description: |
    ToGather 전체 서비스 API 통합 문서
    
    ## 서비스 구성
    - **인증 서비스**: 회원가입, 로그인, 토큰 관리
    - **사용자 서비스**: 사용자 정보 관리, 그룹 관리
    - **트레이딩 서비스**: 주식 거래, 포트폴리오 관리, 계좌 관리
    - **결제 서비스**: 결제 처리, 이체, 계좌 관리
    - **투표 서비스**: 투표 제안, 참여, 집계
    - **히스토리 서비스**: 사용자 활동 히스토리 조회
    
    ## 인증 방식
    - JWT Bearer Token 인증 사용
    - 모든 API 요청에 Authorization 헤더 필요
    - 예: `Authorization: Bearer your-jwt-token`
    
    ## 공통 헤더
    - `X-User-Id`: 사용자 ID (인증된 사용자)
    - `X-Device-Id`: 디바이스 ID (로그인/회원가입 시)
    - `X-Group-Id`: 그룹 ID (그룹 관련 API)
    - `X-Refresh-Token`: 리프레시 토큰 (토큰 갱신 시)
    
    ## 에러 응답
    - 400: 잘못된 요청 데이터
    - 401: 인증 실패
    - 403: 권한 없음
    - 404: 리소스를 찾을 수 없음
    - 500: 서버 내부 오류
  version: 1.0.0
  contact:
    name: ToGather API Support
    email: support@togather.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000
    description: API Gateway (로컬 개발 환경)
  - url: http://localhost:8081
    description: Trading Service (로컬 개발 환경)
  - url: http://localhost:8082
    description: User Service (로컬 개발 환경)
  - url: http://localhost:8083
    description: Pay Service (로컬 개발 환경)
  - url: http://localhost:8084
    description: Vote Service (로컬 개발 환경)

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT 토큰을 입력하세요.
        
        **토큰 획득 방법:**
        1. 회원가입 또는 로그인 API 호출
        2. 응답에서 `accessToken` 값 복사
        3. Authorization 헤더에 `Bearer {accessToken}` 형태로 입력
        
        **예시:**
        ```
        Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        ```

  schemas:
    # 공통 응답 스키마
    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
          description: 요청 성공 여부
        message:
          type: string
          description: 응답 메시지
        data:
          type: object
          description: 응답 데이터
        error:
          type: string
          description: 에러 메시지 (실패 시)
        errorCode:
          type: string
          description: 에러 코드 (실패 시)
      example:
        success: true
        message: "요청이 성공적으로 처리되었습니다."
        data: {}

    # 인증 관련 스키마
    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: 액세스 토큰
        refreshToken:
          type: string
          description: 리프레시 토큰
        userId:
          type: string
          format: uuid
          description: 사용자 ID
      example:
        accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        userId: "550e8400-e29b-41d4-a716-446655440000"

    # 사용자 관련 스키마
    UserInfo:
      type: object
      properties:
        userId:
          type: string
          format: uuid
          description: 사용자 ID
        username:
          type: string
          description: 사용자명
        nickname:
          type: string
          description: 닉네임
      example:
        userId: "550e8400-e29b-41d4-a716-446655440000"
        username: "testuser"
        nickname: "테스트유저"

    # 그룹 관련 스키마
    GroupInfo:
      type: object
      properties:
        groupId:
          type: string
          format: uuid
          description: 그룹 ID
        groupName:
          type: string
          description: 그룹명
        maxMembers:
          type: integer
          description: 최대 멤버 수
        currentMembers:
          type: integer
          description: 현재 멤버 수
        goalAmount:
          type: number
          description: 목표 금액
        initialAmount:
          type: number
          description: 초기 금액
      example:
        groupId: "550e8400-e29b-41d4-a716-446655440001"
        groupName: "테스트 그룹"
        maxMembers: 10
        currentMembers: 5
        goalAmount: 1000000
        initialAmount: 100000

    # 주식 관련 스키마
    StockInfo:
      type: object
      properties:
        stockCode:
          type: string
          description: 종목코드
        stockName:
          type: string
          description: 종목명
        currentPrice:
          type: number
          description: 현재가
        changeRate:
          type: number
          description: 변동률
        volume:
          type: integer
          description: 거래량
      example:
        stockCode: "005930"
        stockName: "삼성전자"
        currentPrice: 75000
        changeRate: 2.5
        volume: 1000000

    # 포트폴리오 관련 스키마
    PortfolioSummary:
      type: object
      properties:
        totalValue:
          type: number
          description: 총 자산 가치
        totalProfit:
          type: number
          description: 총 수익
        profitRate:
          type: number
          description: 수익률
        holdings:
          type: array
          items:
            $ref: '#/components/schemas/HoldingInfo'
      example:
        totalValue: 1000000
        totalProfit: 50000
        profitRate: 5.0
        holdings: []

    HoldingInfo:
      type: object
      properties:
        stockCode:
          type: string
          description: 종목코드
        stockName:
          type: string
          description: 종목명
        quantity:
          type: integer
          description: 보유 수량
        averagePrice:
          type: number
          description: 평균 단가
        currentPrice:
          type: number
          description: 현재가
        profit:
          type: number
          description: 수익
        profitRate:
          type: number
          description: 수익률
      example:
        stockCode: "005930"
        stockName: "삼성전자"
        quantity: 10
        averagePrice: 70000
        currentPrice: 75000
        profit: 50000
        profitRate: 7.14

    # 결제 관련 스키마
    PaymentInfo:
      type: object
      properties:
        paymentId:
          type: string
          format: uuid
          description: 결제 ID
        amount:
          type: number
          description: 결제 금액
        status:
          type: string
          description: 결제 상태
        createdAt:
          type: string
          format: date-time
          description: 결제 일시
      example:
        paymentId: "550e8400-e29b-41d4-a716-446655440002"
        amount: 100000
        status: "COMPLETED"
        createdAt: "2024-01-01T00:00:00Z"

    # 투표 관련 스키마
    ProposalInfo:
      type: object
      properties:
        proposalId:
          type: string
          format: uuid
          description: 제안 ID
        proposalName:
          type: string
          description: 제안명
        proposerName:
          type: string
          description: 제안자명
        category:
          type: string
          enum: [TRADE, PAY]
          description: 카테고리
        action:
          type: string
          description: 액션
        status:
          type: string
          description: 상태
        approveCount:
          type: integer
          description: 찬성 수
        rejectCount:
          type: integer
          description: 반대 수
        myVote:
          type: string
          enum: [APPROVE, REJECT, NONE]
          description: 내 투표
      example:
        proposalId: "550e8400-e29b-41d4-a716-446655440003"
        proposalName: "삼성전자 매수 제안"
        proposerName: "홍길동"
        category: "TRADE"
        action: "BUY"
        status: "ACTIVE"
        approveCount: 5
        rejectCount: 2
        myVote: "APPROVE"

    # 히스토리 관련 스키마
    HistoryItem:
      type: object
      properties:
        historyId:
          type: string
          format: uuid
          description: 히스토리 ID
        action:
          type: string
          description: 액션
        description:
          type: string
          description: 설명
        createdAt:
          type: string
          format: date-time
          description: 생성 일시
      example:
        historyId: "550e8400-e29b-41d4-a716-446655440004"
        action: "STOCK_BUY"
        description: "삼성전자 10주 매수"
        createdAt: "2024-01-01T00:00:00Z"

  responses:
    # 공통 응답
    SuccessResponse:
      description: 성공 응답
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'

    # 에러 응답들
    BadRequestResponse:
      description: 잘못된 요청
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
          example:
            success: false
            message: "잘못된 요청 데이터입니다."
            error: "INVALID_REQUEST"
            errorCode: "BAD_REQUEST"

    UnauthorizedResponse:
      description: 인증 실패
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
          example:
            success: false
            message: "인증이 필요합니다."
            error: "UNAUTHORIZED"
            errorCode: "AUTH_REQUIRED"

    ForbiddenResponse:
      description: 권한 없음
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
          example:
            success: false
            message: "접근 권한이 없습니다."
            error: "FORBIDDEN"
            errorCode: "ACCESS_DENIED"

    NotFoundResponse:
      description: 리소스를 찾을 수 없음
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
          example:
            success: false
            message: "요청한 리소스를 찾을 수 없습니다."
            error: "NOT_FOUND"
            errorCode: "RESOURCE_NOT_FOUND"

    InternalServerErrorResponse:
      description: 서버 내부 오류
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
          example:
            success: false
            message: "서버 내부 오류가 발생했습니다."
            error: "INTERNAL_SERVER_ERROR"
            errorCode: "SERVER_ERROR"

tags:
  - name: 인증 관리
    description: 회원가입, 로그인, 토큰 갱신, 로그아웃 관련 API
  - name: 사용자 관리
    description: 사용자 정보 조회, 수정, 중복 확인 관련 API
  - name: 그룹 관리
    description: 그룹 생성, 조회, 수정, 삭제 관련 API
  - name: 트레이딩 관리
    description: 주식 거래, 포트폴리오 관리, 계좌 관리 관련 API
  - name: 결제 관리
    description: 결제, 이체, 계좌 관리 관련 API
  - name: 투표 관리
    description: 투표 제안, 참여, 집계 관련 API
  - name: 히스토리 관리
    description: 사용자 활동 히스토리 조회 관련 API